enum UserRole {
  MANAGER
  DEVELOPER
}

type Query {
  getLeaves(email: String, startDate: String!, endDate: String!): [Leave!]!
  getHolidays(startDate: String!, endDate: String!): [Leave!]!
  getRoles(id: String): [Role!]!
}

type Mutation {
  addUser(email: String!, password: String!, name: String!, roleId: String!, managerId: String): User!
  addLeave(userId: String!, startDate: String!, endDate: String!): User!
  login(email: String!, password: String!): AuthPayload
}

type AuthPayload {
  token: String
  user: User
}

type Holiday {
  id: ID!
  leave: Leave!
}

type Role {
  id: ID!
  name: UserRole!
}

type User {
  id: ID!
  name: String!
  role: Role!
  email: String!
  password: String!
  manager: User
  leavePlans: [Leave!]
}

type Leave {
  id: ID!
  startDate: String!
  endDate: String!
  postedBy: [User!]!
}