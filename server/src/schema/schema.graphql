enum UserRole {
  MANAGER
  DEVELOPER
  ADMIN
}

type BatchPayload {
  count: Int!
}

type Query {
  getLeaves(addSub: Boolean): [Leave!]!
  getHolidays(startDate: String!, endDate: String!): [Leave!]!
  getRoles(id: String): [Role!]!
}

type Mutation {
  addUser(email: String!, password: String!, name: String!, roleId: String!, managerId: String): User!
  updateUser(name: String!, role: UserRole!, managerId: String!): User!
  deleteUser(userId: String!): User!

  addLeave(startDate: String!, endDate: String!): User!
  deleteLeave(leaveIds: [String!]): BatchPayload!
  
  login(email: String!, password: String!): AuthPayload
}

type AuthPayload {
  token: String
  user: User
}

type Holiday {
  id: ID!
  leave: Leave!
}

type Role {
  id: ID!
  name: UserRole!
}

type User {
  id: ID!
  name: String!
  role: Role!
  email: String!
  password: String!
  manager: User
  leavePlans: [Leave!]
}

type Leave {
  id: ID!
  startDate: String!
  endDate: String!
  postedBy: User!
}